[{"D:\\coding\\aoc-leaderboard-display\\src\\index.js":"1","D:\\coding\\aoc-leaderboard-display\\src\\reportWebVitals.js":"2","D:\\coding\\aoc-leaderboard-display\\src\\App.js":"3","D:\\coding\\aoc-leaderboard-display\\src\\Table.js":"4","D:\\coding\\aoc-leaderboard-display\\src\\NameTable.js":"5","D:\\coding\\aoc-leaderboard-display\\src\\puzzleTableCell.js":"6","D:\\coding\\aoc-leaderboard-display\\src\\PuzzleTableCell.js":"7"},{"size":500,"mtime":1608921301911,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1608921301911,"results":"10","hashOfConfig":"9"},{"size":5104,"mtime":1609420354785,"results":"11","hashOfConfig":"9"},{"size":1617,"mtime":1609439584270,"results":"12","hashOfConfig":"9"},{"size":2268,"mtime":1609442035812,"results":"13","hashOfConfig":"9"},{"size":726,"mtime":1609441841206,"results":"14","hashOfConfig":"9"},{"size":594,"mtime":1609442347538,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"12zqgbi",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\coding\\aoc-leaderboard-display\\src\\index.js",[],"D:\\coding\\aoc-leaderboard-display\\src\\reportWebVitals.js",[],"D:\\coding\\aoc-leaderboard-display\\src\\App.js",["32","33"],"import React, {useState, useEffect, useMemo} from 'react'\r\nimport './App.css';\r\n\r\nimport Table from './Table.js'\r\nimport NameTable from './NameTable.js'\r\n\r\nfunction App() {\r\n    const [leaderboardData, setLeaderboardData] = useState([])\r\n    const [leaderboardPlacings, setLeaderboardPlacings] = useState([])\r\n    const [relativeTimeUsed, setRelativeTimeUsed] = useState(true)\r\n    const fetchLeaderboardData = () => {\r\n        fetch('data.json', {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            }\r\n        })\r\n            .then((response) => {\r\n                console.log(response);\r\n                return response.json();\r\n            })\r\n            .then((data) => {\r\n                console.log(data);\r\n                setLeaderboardData(Object.values(data.members));\r\n            });\r\n    }\r\n    const generateTimestampCell = ({cell: {value}}, puzzleDay) => {\r\n        let date = new Date(parseInt(value, 10) * 1000)\r\n        let day = date.getDate()\r\n        let minutes = '0' + date.getMinutes()\r\n        let seconds = '0' + date.getSeconds()\r\n        if (!relativeTimeUsed) {\r\n            let hours = '0' + date.getHours()\r\n            return (\r\n                <>\r\n                    <p className='timestamp-time'>\r\n                        12/{day}\r\n                        <br />\r\n                        {hours.substr(-2)}:{minutes.substr(-2)}:{seconds.substr(-2)}\r\n                    </p>\r\n                </>\r\n            )\r\n        } else {\r\n            let hours = '0' + date.getHours()\r\n            return (\r\n                <p className='timestamp-time'>\r\n                    {day - puzzleDay + ' day' + ((day - puzzleDay === 1) ? '' : 's')},\r\n                    <br />\r\n                    {hours.substr(-2)}:{minutes.substr(-2)}:{seconds.substr(-2)}\r\n                </p>\r\n            )\r\n        }\r\n    }\r\n    const generatePuzzleColumns = () => {\r\n        let tableColumns = []\r\n        for (let i = 1; i <= 25; i++) {\r\n            tableColumns.push({\r\n                Header: 'Day ' + i,\r\n                columns: [\r\n                    {\r\n                        Header: 'Part 1',\r\n                        accessor: 'completion_day_level.' + i + '.1.get_star_ts',\r\n                        Cell: (cell) => generateTimestampCell(cell, i)\r\n                    },\r\n                    {\r\n                        Header: 'Part 2',\r\n                        accessor: 'completion_day_level.' + i + '.2.get_star_ts',\r\n                        Cell: (cell) => generateTimestampCell(cell, i)\r\n                    }\r\n                ]\r\n            })\r\n        }\r\n        return tableColumns\r\n    }\r\n    const puzzleColumns = useMemo(\r\n        generatePuzzleColumns, [] // react gets angry about this but if i put the dependency in there it renders too much\r\n    )\r\n    const generateDayPlacings = () => {\r\n        let placingsArray = []\r\n        for (let i = 0; i < 50; i++) {\r\n            let currentDayTimes = []\r\n            let currentDayPlacings = []\r\n            for (let memberIndex = 0; memberIndex < leaderboardData.length; memberIndex++) {\r\n                let puzzleTimestamps = leaderboardData[memberIndex]['completion_day_level']\r\n                currentDayTimes.push(\r\n                    parseInt(\r\n                        puzzleTimestamps[Math.floor(i / 2) + 1][i % 2 + 1]['get_star_ts'],\r\n                        10\r\n                    )\r\n                )\r\n            }\r\n            for (let j = 0; j < currentDayTimes.length; j++) {\r\n                let myPlacing = 0\r\n                for (let k = 0; k < currentDayTimes.length; k++) {\r\n                    if (currentDayTimes[k] < currentDayTimes[j]) {\r\n                        myPlacing++\r\n                    }\r\n                }\r\n                currentDayPlacings.push(myPlacing)\r\n            }\r\n            placingsArray.push(currentDayPlacings)\r\n        }\r\n        setLeaderboardPlacings(placingsArray)\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchLeaderboardData()\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (leaderboardData.length) {\r\n            console.log(leaderboardData)\r\n            generateDayPlacings()\r\n        }\r\n    }, [leaderboardData])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <h1>Advent of Code Leaderboard</h1>\r\n                <hr/>\r\n                <button onClick={() => setRelativeTimeUsed(!relativeTimeUsed)}>\r\n                    {relativeTimeUsed ? 'Relative' : 'Absolute'} Time Display\r\n                </button>\r\n                <div className='tableArea'>\r\n                    <div className='nameTable'>\r\n                        <NameTable lbData={leaderboardData} />\r\n                    </div>\r\n                    <div className='puzzleTable'>\r\n                        <Table columns={puzzleColumns} data={leaderboardData}\r\n                               rankings={leaderboardPlacings}/>\r\n                    </div>\r\n                </div>\r\n            </header>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","D:\\coding\\aoc-leaderboard-display\\src\\Table.js",[],"D:\\coding\\aoc-leaderboard-display\\src\\NameTable.js",["34"],"D:\\coding\\aoc-leaderboard-display\\src\\puzzleTableCell.js",["35"],"import React, { useState } from 'react';\r\nimport getOrdinal from \"./getOrdinal\";\r\n\r\nexport default function puzzleTableCell({cell, rank}) {\r\n    const [cellHovered, setCellHovered] = useState(false)\r\n\r\n    return (\r\n        <td {...cell.getCellProps()} className={'rank' + rank}\r\n            onMouseEnter={() => setCellHovered(true)}\r\n            onMouseLeave={() => setCellHovered(false)}>\r\n            {cellHovered ? () => (\r\n                <>\r\n                    <p>\r\n                        {rank + getOrdinal(rank)}\r\n                    </p>\r\n                    <p>\r\n                        for this puzzle\r\n                    </p>\r\n                </>\r\n            ) : cell.render('Cell')}\r\n        </td>\r\n    )\r\n\r\n}","D:\\coding\\aoc-leaderboard-display\\src\\PuzzleTableCell.js",[],{"ruleId":"36","severity":1,"message":"37","line":76,"column":32,"nodeType":"38","endLine":76,"endColumn":34,"suggestions":"39"},{"ruleId":"36","severity":1,"message":"40","line":115,"column":8,"nodeType":"38","endLine":115,"endColumn":25,"suggestions":"41"},{"ruleId":"36","severity":1,"message":"42","line":24,"column":11,"nodeType":"38","endLine":24,"endColumn":19,"suggestions":"43"},{"ruleId":"44","severity":2,"message":"45","line":5,"column":43,"nodeType":"46","endLine":5,"endColumn":51},"react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'generateTimestampCell'. Either include it or remove the dependency array.","ArrayExpression",["47"],"React Hook useEffect has a missing dependency: 'generateDayPlacings'. Either include it or remove the dependency array.",["48"],"React Hook useEffect has a missing dependency: 'getOverallRankings'. Either include it or remove the dependency array.",["49"],"react-hooks/rules-of-hooks","React Hook \"useState\" is called in function \"puzzleTableCell\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter.","Identifier",{"desc":"50","fix":"51"},{"desc":"52","fix":"53"},{"desc":"54","fix":"55"},"Update the dependencies array to be: [generateTimestampCell]",{"range":"56","text":"57"},"Update the dependencies array to be: [generateDayPlacings, leaderboardData]",{"range":"58","text":"59"},"Update the dependencies array to be: [getOverallRankings, lbData]",{"range":"60","text":"61"},[2771,2773],"[generateTimestampCell]",[4223,4240],"[generateDayPlacings, leaderboardData]",[742,750],"[getOverallRankings, lbData]"]